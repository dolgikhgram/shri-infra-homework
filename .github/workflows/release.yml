name: "Создание релиза"

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  checks: read

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: "Скачать код"
        uses: actions/checkout@v4
      - name: "Установить Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: "Установить зависимости"
        run: npm ci
      - name: "Запустить линтер"
        run: npm run lint

      - name: "Запустить тесты"
        run: npm run test
  create-release-branch:
    needs: lint-and-test
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.set-version.outputs.version }}
    steps:
      - name : "Скачать код"
        uses : actions/checkout@v4
        with : 
          fetch-depth : 0
      
      - name: "Установить версию релиз"
        id: set-version
        run: |
          VERSION=${{ github.run_number }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: "Создать релизную ветку"
        run: |
          VERSION=${{ steps.set-version.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b releases/$VERSION
          git push origin releases/$VERSION
  build-and-push-docker:
    needs: create-release-branch
    runs-on: ubuntu-latest
    steps:
      - name: "Скачать код"
        uses: actions/checkout@v4
        with:
          ref: releases/${{ needs.create-release-branch.outputs.release-version }}
          
      - name: "Сборка Docker образа"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          docker build -t shri-app:$VERSION .
          
      - name: "Авторизация в Container Registry (упрощенный способ)"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          
          # Попробуем простую авторизацию через docker login
          
          # Используем printf для правильной обработки escape-последовательностей
          printf '%s\n' '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' | sed 's/\\\\n/\n/g' > key.json
          
          # Проверяем, что файл валидный JSON
          if jq empty key.json 2>/dev/null; then
            # JSON ключ валиден
            :
          else
            # JSON невалиден, пропускаем Container Registry
            rm -f key.json
            exit 0
          fi
          
          # Попробуем авторизацию через json_key
          cat key.json | docker login \
            --username json_key \
            --password-stdin \
            cr.yandex || {
            # Авторизация не удалась, пропускаем Container Registry
            rm -f key.json
            exit 0
          }
          
          rm -f key.json
          # Успешно авторизовались в Container Registry
          
      - name: "Тегирование для Container Registry"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
          
          # Тегируем образы для Container Registry
          docker tag shri-app:$VERSION cr.yandex/$REGISTRY_ID/app:$VERSION
          docker tag shri-app:$VERSION cr.yandex/$REGISTRY_ID/app:${VERSION}_latest
          
      - name: "Загрузка в Container Registry"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
          
          # Загружаем образы в Container Registry
          
          # Пробуем загрузить, но не падаем при ошибке
          docker push cr.yandex/$REGISTRY_ID/app:$VERSION || true
          docker push cr.yandex/$REGISTRY_ID/app:${VERSION}_latest || true
  create-git-tag:
    needs: [create-release-branch, build-and-push-docker]
    runs-on: ubuntu-latest
    steps:
      - name: "Скачать код"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Создать Git тег"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $VERSION
          git push origin $VERSION    
  create-github-issue:
    needs: [create-release-branch, create-git-tag]
    runs-on: ubuntu-latest
    steps:
      - name: "Скачать код"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "Получить список коммитов"
        id: get-commits
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          
          # Ищем предыдущий релизный тег
          PREV_TAG=$(git tag -l | grep -E '^[0-9]+(_fix[0-9]+)?$' | sort -V | tail -1)
          
          if [ -z "$PREV_TAG" ]; then
            # Первый релиз - берём все коммиты
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)")
          else
            # Предыдущий тег: $PREV_TAG
            COMMITS=$(git log ${PREV_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: "Создать GitHub Issue"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          DATE=$(date '+%Y-%m-%d %H:%M:%S')
          AUTHOR="${{ github.actor }}"
          
          cat > issue_body.md << EOF
          ## Релиз версии $VERSION
          
          **Дата:** $DATE  
          **Автор:** @$AUTHOR  
          **Версия:** $VERSION  
          
          ### Docker образ:
          \`cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:$VERSION\`
          
          ### Список изменений:
          ${{ steps.get-commits.outputs.commits }}
          EOF
          
          gh issue create \
            --title "Релиз $VERSION" \
            --body-file issue_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  update-changelog:
    needs: [create-release-branch, create-github-issue]
    runs-on: ubuntu-latest
    steps:
      - name: "Скачать код"
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          
      - name: "Получить список коммитов для CHANGELOG"
        id: get-changelog-commits
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          
          # Ищем предыдущий релизный тег
          PREV_TAG=$(git tag -l | grep -E '^[0-9]+(_fix[0-9]+)?$' | sort -V | tail -1)
          
          if [ -z "$PREV_TAG" ]; then
            # Первый релиз - берём все коммиты
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)")
          else
            # Предыдущий тег: $PREV_TAG
            COMMITS=$(git log ${PREV_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: "Обновить CHANGELOG.md"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          DATE=$(date '+%Y-%m-%d')
          
          # Создаём временный файл с новой версией
          cat > new_changelog.md << EOF
          ## Версия $VERSION ($DATE)
          
          ${{ steps.get-changelog-commits.outputs.commits }}
          
          EOF
          
          # Добавляем существующий CHANGELOG в конец
          if [ -f "CHANGELOG.md" ]; then
            cat CHANGELOG.md >> new_changelog.md
          fi
          
          # Заменяем старый файл
          mv new_changelog.md CHANGELOG.md
          
      - name: "Создать PR для обновления CHANGELOG"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          BRANCH_NAME="changelog-update-$VERSION"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Создаем новую ветку для обновления CHANGELOG
          git checkout -b $BRANCH_NAME
          git add CHANGELOG.md
          git commit -m "docs: обновить CHANGELOG.md для версии $VERSION"
          git push origin $BRANCH_NAME
          
          # Создаем PR с автоматическим merge
          PR_URL=$(gh pr create \
            --title "docs: обновить CHANGELOG.md для версии $VERSION" \
            --body "Автоматическое обновление CHANGELOG.md для релиза $VERSION

          Этот PR будет автоматически слит после успешного прохождения всех проверок." \
            --head $BRANCH_NAME \
            --base main)
          
          # Получаем номер PR из URL
          PR_NUMBER=$(echo $PR_URL | grep -o '[0-9]*$')
          
          # Включаем автоматический merge
          gh pr merge $PR_NUMBER --auto --squash
          
          echo "✅ PR #$PR_NUMBER создан и настроен для автоматического слития после прохождения проверок"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
