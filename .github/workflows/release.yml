name: "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"

on:
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: "–°–∫–∞—á–∞—Ç—å –∫–æ–¥"
        uses: actions/checkout@v4
      - name: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
        run: npm ci
      - name: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä"
        run: npm run lint

      - name: "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
        run: npm run test
  create-release-branch:
    needs: lint-and-test
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.set-version.outputs.version }}
    steps:
      - name : "–°–∫–∞—á–∞—Ç—å –∫–æ–¥"
        uses : actions/checkout@v4
        with : 
          fetch-depth : 0
      
      - name: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é —Ä–µ–ª–∏–∑–∞"
        id: set-version
        run: |
          VERSION=${{ github.run_number }}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞: $VERSION"
      
      - name: "–°–æ–∑–¥–∞—Ç—å —Ä–µ–ª–∏–∑–Ω—É—é –≤–µ—Ç–∫—É"
        run: |
          VERSION=${{ steps.set-version.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b releases/$VERSION
          git push origin releases/$VERSION
  build-and-push-docker:
    needs: create-release-branch
    runs-on: ubuntu-latest
    steps:
      - name: "–°–∫–∞—á–∞—Ç—å –∫–æ–¥"
        uses: actions/checkout@v4
        with:
          ref: releases/${{ needs.create-release-branch.outputs.release-version }}
          
      - name: "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          docker build -t shri-app:$VERSION .
          echo "–û–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω —Å —Ç–µ–≥–æ–º: $VERSION"
          
      - name: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Container Registry (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          echo "=== –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ==="
          echo "–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞: $VERSION"
          echo "Registry ID: ${{ secrets.YC_REGISTRY_ID }}"
          echo "============================="
          
          # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ docker login  
          echo "–ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Container Registry..."
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
          echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' | sed 's/\\n/\n/g' > key.json
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π JSON
          echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –∫–ª—é—á..."
          if jq . key.json > /dev/null 2>&1; then
            echo "‚úÖ JSON –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω"
          else
            echo "‚ùå JSON –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã:"
            head -c 200 key.json
            echo "‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
            rm -f key.json
            exit 0
          fi
          
          # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ json_key
          cat key.json | docker login \
            --username json_key \
            --password-stdin \
            cr.yandex || {
            echo "‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º Container Registry"
            rm -f key.json
            exit 0
          }
          
          rm -f key.json
          echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ Container Registry"
          
      - name: "–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Container Registry"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
          
          echo "–¢–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–∑—ã –¥–ª—è Container Registry..."
          docker tag shri-app:$VERSION cr.yandex/$REGISTRY_ID/app:$VERSION
          docker tag shri-app:$VERSION cr.yandex/$REGISTRY_ID/app:${VERSION}_latest
          
          echo "‚úÖ –û–±—Ä–∞–∑—ã –ø–µ—Ä–µ—Ç–µ–≥–∏—Ä–æ–≤–∞–Ω—ã:"
          echo "  - cr.yandex/$REGISTRY_ID/app:$VERSION" 
          echo "  - cr.yandex/$REGISTRY_ID/app:${VERSION}_latest"
          
      - name: "–ó–∞–≥—Ä—É–∑–∫–∞ –≤ Container Registry"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
          
          echo "–ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–∑—ã –≤ Container Registry..."
          
          # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
          if docker push cr.yandex/$REGISTRY_ID/app:$VERSION; then
            echo "‚úÖ –û–±—Ä–∞–∑ cr.yandex/$REGISTRY_ID/app:$VERSION –∑–∞–≥—Ä—É–∂–µ–Ω"
          else
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑ —Å –≤–µ—Ä—Å–∏–µ–π $VERSION"
          fi
          
          if docker push cr.yandex/$REGISTRY_ID/app:${VERSION}_latest; then
            echo "‚úÖ –û–±—Ä–∞–∑ cr.yandex/$REGISTRY_ID/app:${VERSION}_latest –∑–∞–≥—Ä—É–∂–µ–Ω"
          else
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å latest –æ–±—Ä–∞–∑"
          fi
          
          echo "üèÅ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Container Registry –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  create-git-tag:
    needs: [create-release-branch, build-and-push-docker]
    runs-on: ubuntu-latest
    steps:
      - name: "–°–∫–∞—á–∞—Ç—å –∫–æ–¥"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "–°–æ–∑–¥–∞—Ç—å Git —Ç–µ–≥"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          echo "–°–æ–∑–¥–∞—é —Ç–µ–≥: $VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $VERSION
          git push origin $VERSION
          echo "–¢–µ–≥ $VERSION —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"    
  create-github-issue:
    needs: [create-release-branch, create-git-tag]
    runs-on: ubuntu-latest
    steps:
      - name: "–°–∫–∞—á–∞—Ç—å –∫–æ–¥"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤"
        id: get-commits
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          echo "–ü–æ–ª—É—á–∞—é –∫–æ–º–º–∏—Ç—ã –¥–ª—è –≤–µ—Ä—Å–∏–∏ $VERSION"
          
          # –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–ª–∏–∑–Ω—ã–π —Ç–µ–≥
          PREV_TAG=$(git tag -l | grep -E '^[0-9]+(_fix[0-9]+)?$' | sort -V | tail -1)
          
          if [ -z "$PREV_TAG" ]; then
            echo "–ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑ - –±–µ—Ä—ë–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã"
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)")
          else
            echo "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥: $PREV_TAG"
            COMMITS=$(git log ${PREV_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: "–°–æ–∑–¥–∞—Ç—å GitHub Issue"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          DATE=$(date '+%Y-%m-%d %H:%M:%S')
          AUTHOR="${{ github.actor }}"
          
          cat > issue_body.md << EOF
          ## –†–µ–ª–∏–∑ –≤–µ—Ä—Å–∏–∏ $VERSION
          
          **–î–∞—Ç–∞:** $DATE  
          **–ê–≤—Ç–æ—Ä:** @$AUTHOR  
          **–í–µ—Ä—Å–∏—è:** $VERSION  
          
          ### Docker –æ–±—Ä–∞–∑:
          \`cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:$VERSION\`
          
          ### –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
          ${{ steps.get-commits.outputs.commits }}
          EOF
          
          echo "–°–æ–∑–¥–∞—é GitHub Issue –¥–ª—è —Ä–µ–ª–∏–∑–∞ $VERSION"
          gh issue create \
            --title "–†–µ–ª–∏–∑ $VERSION" \
            --body-file issue_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  update-changelog:
    needs: [create-release-branch, create-github-issue]
    runs-on: ubuntu-latest
    steps:
      - name: "–°–∫–∞—á–∞—Ç—å –∫–æ–¥"
        uses: actions/checkout@v4
        with:
          ref: releases/${{ needs.create-release-branch.outputs.release-version }}
          fetch-depth: 0
          
      - name: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è CHANGELOG"
        id: get-changelog-commits
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          echo "–ü–æ–ª—É—á–∞—é –∫–æ–º–º–∏—Ç—ã –¥–ª—è CHANGELOG –≤–µ—Ä—Å–∏–∏ $VERSION"
          
          # –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–ª–∏–∑–Ω—ã–π —Ç–µ–≥
          PREV_TAG=$(git tag -l | grep -E '^[0-9]+(_fix[0-9]+)?$' | sort -V | tail -1)
          
          if [ -z "$PREV_TAG" ]; then
            echo "–ü–µ—Ä–≤—ã–π —Ä–µ–ª–∏–∑ - –±–µ—Ä—ë–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã"
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)")
          else
            echo "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥: $PREV_TAG"
            COMMITS=$(git log ${PREV_TAG}..HEAD --oneline --pretty=format:"- %s (%h)")
          fi
          
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: "–û–±–Ω–æ–≤–∏—Ç—å CHANGELOG.md"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          DATE=$(date '+%Y-%m-%d')
          
          echo "–û–±–Ω–æ–≤–ª—è—é CHANGELOG.md –¥–ª—è –≤–µ—Ä—Å–∏–∏ $VERSION"
          
          # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
          cat > new_changelog.md << EOF
          ## –í–µ—Ä—Å–∏—è $VERSION ($DATE)
          
          ${{ steps.get-changelog-commits.outputs.commits }}
          
          EOF
          
          # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CHANGELOG –≤ –∫–æ–Ω–µ—Ü
          if [ -f "CHANGELOG.md" ]; then
            cat CHANGELOG.md >> new_changelog.md
          fi
          
          # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
          mv new_changelog.md CHANGELOG.md
          
          echo "CHANGELOG.md –æ–±–Ω–æ–≤–ª–µ–Ω"
          
      - name: "–ó–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ CHANGELOG"
        run: |
          VERSION=${{ needs.create-release-branch.outputs.release-version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "docs: –æ–±–Ω–æ–≤–∏—Ç—å CHANGELOG.md –¥–ª—è –≤–µ—Ä—Å–∏–∏ $VERSION"
          git push origin releases/$VERSION
          echo "CHANGELOG.md –∑–∞–∫–æ–º–º–∏—á–µ–Ω –≤ —Ä–µ–ª–∏–∑–Ω—É—é –≤–µ—Ç–∫—É"