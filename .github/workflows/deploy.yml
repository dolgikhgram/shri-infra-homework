name: "–î–µ–ø–ª–æ–π"

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: '–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ –¥–ª—è –¥–µ–ø–ª–æ—è'
        required: true
        type: string

jobs:
  check-image-exists:
    runs-on: ubuntu-latest
    outputs:
      image-exists: ${{ steps.check-image.outputs.exists }}
    steps:
      - name: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Container Registry"
        run: |
          printf '%s\n' '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' | sed 's/\\\\n/\n/g' > key.json
          
          if jq empty key.json 2>/dev/null; then
            echo "‚úÖ JSON –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω"
          else
            echo "‚ùå JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω"
            rm -f key.json
            exit 1
          fi
          
          cat key.json | docker login \
            --username json_key \
            --password-stdin \
            cr.yandex || {
            echo "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"
            rm -f key.json
            exit 1
          }
          
          rm -f key.json
          echo "‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ Container Registry"
          
      - name: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞"
        id: check-image
        run: |
          VERSION=${{ github.event.inputs.release_version }}
          REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
          IMAGE_TAG="cr.yandex/$REGISTRY_ID/app:${VERSION}_latest"
          
          echo "–ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞: $IMAGE_TAG"
          
          # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±—Ä–∞–∑–∞
          if docker manifest inspect $IMAGE_TAG >/dev/null 2>&1; then
            echo "‚úÖ –û–±—Ä–∞–∑ $IMAGE_TAG —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå –û–±—Ä–∞–∑ $IMAGE_TAG –Ω–µ –Ω–∞–π–¥–µ–Ω"
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  deploy-to-server:
    needs: check-image-exists
    runs-on: ubuntu-latest
    if: needs.check-image-exists.outputs.image-exists == 'true'
    steps:
      - name: "–î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ SSH"
        run: |
          VERSION=${{ github.event.inputs.release_version }}
          REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
          IMAGE_TAG="cr.yandex/$REGISTRY_ID/app:${VERSION}_latest"
          
          echo "–ù–∞—á–∏–Ω–∞—é –¥–µ–ø–ª–æ–π –æ–±—Ä–∞–∑–∞ $IMAGE_TAG –Ω–∞ —Å–µ—Ä–≤–µ—Ä"
          
          # –°–æ–∑–¥–∞–µ–º SSH –∫–ª—é—á
          echo "${{ secrets.SERVER_SSH_KEY }}" > ssh_key
          chmod 600 ssh_key
          
          # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è
          cat > deploy_script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          VERSION="$1"
          REGISTRY_ID="$2"
          YC_SERVICE_ACCOUNT_KEY="$3"
          IMAGE_TAG="cr.yandex/$REGISTRY_ID/app:${VERSION}_latest"
          
          echo "=== –î–µ–ø–ª–æ–π –≤–µ—Ä—Å–∏–∏ $VERSION ==="
          echo "–û–±—Ä–∞–∑: $IMAGE_TAG"
          
          # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Container Registry
          echo "–ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Container Registry..."
          printf '%s\n' "$YC_SERVICE_ACCOUNT_KEY" | sed 's/\\\\n/\n/g' > /tmp/key.json
          
          if ! jq empty /tmp/key.json 2>/dev/null; then
            echo "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –∫–ª—é—á"
            rm -f /tmp/key.json
            exit 1
          fi
          
          sudo cat /tmp/key.json | sudo docker login \
            --username json_key \
            --password-stdin \
            cr.yandex
          
          rm -f /tmp/key.json
          echo "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
          
          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          echo "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
          sudo docker stop shri-app 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
          sudo docker rm shri-app 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
          
          # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
          echo "–°–∫–∞—á–∏–≤–∞—é –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑..."
          sudo docker pull "$IMAGE_TAG"
          
          # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          echo "–ó–∞–ø—É—Å–∫–∞—é –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..."
          sudo docker run -d \
            --name shri-app \
            --restart unless-stopped \
            -p 3000:3000 \
            "$IMAGE_TAG"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
          sleep 5
          if sudo docker ps | grep shri-app; then
            echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
            echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 3000"
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
            sudo docker logs shri-app || true
            exit 1
          fi
          
          echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
          EOF
          
          chmod +x deploy_script.sh
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ SSH
          ssh -i ssh_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
            'bash -s' < deploy_script.sh \
            "$VERSION" \
            "$REGISTRY_ID" \
            "${{ secrets.YC_SERVICE_ACCOUNT_KEY }}"
          
          # –û—á–∏—Å—Ç–∫–∞
          rm -f ssh_key deploy_script.sh
          
          echo "üéâ –î–µ–ø–ª–æ–π –≤–µ—Ä—Å–∏–∏ $VERSION –∑–∞–≤–µ—Ä—à–µ–Ω!"

  add-deploy-comment:
    needs: [deploy-to-server]
    runs-on: ubuntu-latest
    steps:
      - name: "–°–∫–∞—á–∞—Ç—å –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub CLI"
        uses: actions/checkout@v4
        
      - name: "–ù–∞–π—Ç–∏ Issue —Ä–µ–ª–∏–∑–∞"
        id: find-issue
        run: |
          VERSION=${{ github.event.inputs.release_version }}
          echo "–ò—â—É Issue –¥–ª—è —Ä–µ–ª–∏–∑–∞ $VERSION"
          
          # –ò—â–µ–º Issue —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–†–µ–ª–∏–∑ <–≤–µ—Ä—Å–∏—è>"
          ISSUE_NUMBER=$(gh issue list --state all --limit 100 --json number,title | jq -r --arg title "–†–µ–ª–∏–∑ $VERSION" '.[] | select(.title == $title) | .number')
          
          if [ -n "$ISSUE_NUMBER" ]; then
            echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
            echo "–ù–∞–π–¥–µ–Ω Issue #$ISSUE_NUMBER –¥–ª—è —Ä–µ–ª–∏–∑–∞ $VERSION"
          else
            echo "issue_number=" >> $GITHUB_OUTPUT
            echo "Issue –¥–ª—è —Ä–µ–ª–∏–∑–∞ $VERSION –Ω–µ –Ω–∞–π–¥–µ–Ω"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –¥–µ–ø–ª–æ–µ"
        if: steps.find-issue.outputs.issue_number != ''
        run: |
          VERSION=${{ github.event.inputs.release_version }}
          DATE=$(date '+%Y-%m-%d %H:%M:%S')
          AUTHOR="${{ github.actor }}"
          ISSUE_NUMBER=${{ steps.find-issue.outputs.issue_number }}
          SERVER_IP="${{ secrets.SERVER_HOST }}"
          
          cat > deploy_comment.md << EOF
          ## üöÄ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
          
          **–î–∞—Ç–∞ –¥–µ–ø–ª–æ—è:** $DATE  
          **–î–µ–ø–ª–æ–∏–ª:** @$AUTHOR  
          **–í–µ—Ä—Å–∏—è:** $VERSION  
          
          ‚úÖ –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!
          
          üåê **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:** http://$SERVER_IP:3000/hw/store
          EOF
          
          echo "–î–æ–±–∞–≤–ª—è—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –¥–µ–ø–ª–æ–µ –≤ Issue #$ISSUE_NUMBER"
          gh issue comment $ISSUE_NUMBER --body-file deploy_comment.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}