name: "–î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω"

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: '–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞ –¥–ª—è –¥–µ–ø–ª–æ—è'
        required: true
        type: string

jobs:
  check-image-exists:
    runs-on: ubuntu-latest
    outputs:
      image-exists: ${{ steps.check-image.outputs.exists }}
    steps:
      - name: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Container Registry"
        run: |
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º printf –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
          printf '%s\n' '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' | sed 's/\\\\n/\n/g' > key.json
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≤–∞–ª–∏–¥–Ω—ã–π JSON
          if jq empty key.json 2>/dev/null; then
            # JSON –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω
            :
          else
            # JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
            rm -f key.json
            exit 1
          fi
          
          # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ json_key
          cat key.json | docker login \
            --username json_key \
            --password-stdin \
            cr.yandex || {
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
            rm -f key.json
            exit 1
          }
          
          rm -f key.json
          # –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ Container Registry
          
      - name: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞"
        id: check-image
        run: |
          VERSION=${{ github.event.inputs.release_version }}
          REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
          IMAGE_TAG="cr.yandex/$REGISTRY_ID/app:${VERSION}_latest"
          
          # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç –æ–±—Ä–∞–∑–∞
          if docker manifest inspect $IMAGE_TAG >/dev/null 2>&1; then
            # –û–±—Ä–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            # –û–±—Ä–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  deploy-to-server:
    needs: check-image-exists
    runs-on: ubuntu-latest
    if: needs.check-image-exists.outputs.image-exists == 'true'
    steps:
      - name: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª—é—á–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏"
        run: |
          # –°–æ–∑–¥–∞–µ–º JSON –∫–ª—é—á –ª–æ–∫–∞–ª—å–Ω–æ 
          printf '%s\n' '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' | sed 's/\\\\n/\n/g' > yc_key.json
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
          if jq empty yc_key.json 2>/dev/null; then
            # JSON –∫–ª—é—á –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
            :
          else
            # JSON –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
            exit 1
          fi
          
      - name: "–î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ SSH"
        run: |
          VERSION="${{ github.event.inputs.release_version }}"
          REGISTRY_ID="${{ secrets.YC_REGISTRY_ID }}"
          IMAGE_TAG="cr.yandex/${REGISTRY_ID}/app:${VERSION}_latest"
          
          # –ù–∞—á–∏–Ω–∞—é –¥–µ–ø–ª–æ–π –æ–±—Ä–∞–∑–∞ $IMAGE_TAG –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          
          # –°–æ–∑–¥–∞–µ–º SSH –∫–ª—é—á
          echo "${{ secrets.SERVER_SSH_KEY }}" > ssh_key
          chmod 600 ssh_key
          
          # –ü–µ—Ä–µ–¥–∞–µ–º JSON –∫–ª—é—á —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
          scp -i ssh_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            yc_key.json \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/yc_key.json
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ SSH
          ssh -i ssh_key \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << DEPLOY_EOF
          set -e
          
          VERSION="${VERSION}"
          REGISTRY_ID="${REGISTRY_ID}"
          IMAGE_TAG="${IMAGE_TAG}"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º jq –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
          if ! command -v jq &> /dev/null; then
            sudo apt-get update -qq && sudo apt-get install -y jq
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if ! command -v docker &> /dev/null; then
            sudo apt-get update -qq
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker \$USER
          fi
          
          if ! jq empty /tmp/yc_key.json 2>/dev/null; then
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
            rm -f /tmp/yc_key.json
            exit 1
          fi
          
          # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Container Registry
          sudo cat /tmp/yc_key.json | sudo docker login \
            --username json_key \
            --password-stdin \
            cr.yandex
          
          rm -f /tmp/yc_key.json
          # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
          
          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          sudo docker stop shri-app 2>/dev/null || true
          sudo docker rm shri-app 2>/dev/null || true
          
          # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
          sudo docker pull "\$IMAGE_TAG"
          
          # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
          sudo docker run -d \
            --name shri-app \
            --restart unless-stopped \
            -p 3000:3000 \
            "\$IMAGE_TAG"
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
          sleep 5
          if sudo docker ps | grep shri-app; then
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
            :
          else
            # –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            sudo docker logs shri-app || true
            exit 1
          fi
          DEPLOY_EOF
          
          # –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
          rm -f ssh_key yc_key.json

  add-deploy-comment:
    needs: [deploy-to-server]
    runs-on: ubuntu-latest
    steps:
      - name: "–°–∫–∞—á–∞—Ç—å –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub CLI"
        uses: actions/checkout@v4
        
      - name: "–ù–∞–π—Ç–∏ Issue —Ä–µ–ª–∏–∑–∞"
        id: find-issue
        run: |
          VERSION=${{ github.event.inputs.release_version }}
          
          # –ò—â–µ–º Issue —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–†–µ–ª–∏–∑ <–≤–µ—Ä—Å–∏—è>"
          ISSUE_NUMBER=$(gh issue list --state all --limit 100 --json number,title | jq -r --arg title "–†–µ–ª–∏–∑ $VERSION" '.[] | select(.title == $title) | .number')
          
          if [ -n "$ISSUE_NUMBER" ]; then
            echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "issue_number=" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –¥–µ–ø–ª–æ–µ"
        if: steps.find-issue.outputs.issue_number != ''
        run: |
          VERSION=${{ github.event.inputs.release_version }}
          DATE=$(date '+%Y-%m-%d %H:%M:%S')
          AUTHOR="${{ github.actor }}"
          ISSUE_NUMBER=${{ steps.find-issue.outputs.issue_number }}
          SERVER_IP="${{ secrets.SERVER_HOST }}"
          
          cat > deploy_comment.md << EOF
          ## üöÄ –î–µ–ø–ª–æ–π –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
          
          **–î–∞—Ç–∞ –¥–µ–ø–ª–æ—è:** $DATE  
          **–î–µ–ø–ª–æ–∏–ª:** @$AUTHOR  
          **–í–µ—Ä—Å–∏—è:** $VERSION  
          
          –†–µ–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!
          
          **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:** http://$SERVER_IP:3000/hw/store
          EOF
          
          gh issue comment $ISSUE_NUMBER --body-file deploy_comment.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}